let mapleader = "\<Space>"
let maplocalleader = ","

source ~/.plugrc

set background=dark
" Access colors present in 256 colorspace
let base16colorspace=256
set number

call plug#begin()

Plug 'tpope/vim-sensible'
Plug 'kien/ctrlp.vim'
Plug 'd11wtq/ctrlp_bdelete.vim'
Plug 'chriskempson/base16-vim'

" Really nice prompt
Plug 'bling/vim-airline'

Plug 'scrooloose/syntastic'
Plug 'kien/rainbow_parentheses.vim'

" git
Plug 'tpope/vim-fugitive'

" Press v over and over again to expand selection
Plug 'terryma/vim-expand-region'
vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)

" Awesome autocompletion
Plug 'Valloric/YouCompleteMe', { 'do': './install.sh' }

" Lightning fast :Ag searcher
Plug 'rking/ag.vim'

" Ruby extensions
Plug 'vim-ruby/vim-ruby', { 'for': 'ruby' }
Plug 'tpope/vim-rails', { 'for': 'ruby' }
Plug 'tpope/vim-rake', { 'for': 'ruby' }
Plug 'kana/vim-textobj-user', { 'for': 'ruby' }
" var, vir
Plug 'nelstrom/vim-textobj-rubyblock', { 'for': 'ruby' }

" Plug 'tpope/vim-commentary'
Plug 'tpope/vim-endwise'
" Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
" Plug 'tpope/vim-sleuth'

Plug 'jiangmiao/auto-pairs'

" Allow to :Rename files
Plug 'danro/rename.vim'

" Automatically find root project directory
Plug 'airblade/vim-rooter'

" Expand / wrap hashes etc.
Plug 'AndrewRadev/splitjoin.vim'
nmap sj :SplitjoinSplit<cr>
nmap sk :SplitjoinJoin<cr>


Plug 'wting/rust.vim', { 'for': 'rust' }
Plug 'fatih/vim-go', { 'for': 'go' }
Plug 'ap/vim-css-color', { 'for': ['css', 'scss', 'less'] }

Plug 'bitc/vim-hdevtools', { 'for': 'haskell' }
au FileType haskell nnoremap <buffer> <F1> :HdevtoolsType<CR>
au FileType haskell nnoremap <buffer> <silent> <F2> :HdevtoolsClear<CR>

" Navitate freely between tmux and vim
Plug 'christoomey/vim-tmux-navigator'

" Run ruby " Nice column aligning with <Enter>
Plug 'junegunn/vim-easy-align'
vmap <Enter> <Plug>(EasyAlign)
nmap <Leader>a <Plug>(EasyAlign)

" For more reliable indenting and performance
" set foldmethod=indent
" set fillchars="fold: "

" Nice file browsing with -
Plug 'eiginn/netrw'
let g:netrw_altfile = 1
Plug 'tpope/vim-vinegar'

" Set nice 80-characters limiter
" execute "set colorcolumn=" . join(range(81,335), ',')
" hi ColorColumn guibg=#262626 ctermbg=235

" Better search tools
Plug 'haya14busa/incsearch.vim'
Plug 'vim-scripts/gitignore'

call plug#end()

colorscheme base16-monokai

vmap <Leader>y "+y
vmap <Leader>d "+d
nmap <Leader>p "+p
nmap <Leader>P "+P
vmap <Leader>p "+p
vmap <Leader>P "+P
nmap <Leader><Leader> V
nmap <Leader>b :make<CR>
nnoremap <Leader><Tab> <C-^>
nnoremap <Leader>y :!annotate expand('%:p') " what?

nnoremap <Leader>o :CtrlP<CR>
nnoremap <Leader>i :CtrlPBuffer<CR>

vnoremap <silent> y y`]
vnoremap <silent> p p`]
nnoremap <silent> p p`]


nnoremap ; :
nnoremap <Leader>w :w<CR>
nnoremap <Leader>q :q<CR>
nnoremap <Leader>s :wq<CR>
nnoremap <Leader>v V
nnoremap <Leader>g gf

" Remove trailing whitespaces
nnoremap <silent> <Leader><BS> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>:w<CR>

nnoremap H 0
nnoremap L $

" incsearch
map /  <Plug>(incsearch-forward)

" tabs
set expandtab
set shiftwidth=2
set softtabstop=2

set scrolloff=8

set autoread
set hidden

" tab to indent
vnoremap < <gv
vnoremap > >gv|
vnoremap <Tab> >gv|
vnoremap <S-Tab> <gv

" show unwanted characters
set list listchars=tab:\ \ ,trail:Â·

" Enable Spell Checking for markdown files
augroup markdown_spell
  autocmd!
  autocmd BufRead,BufNewFile *.md setlocal spell
  autocmd BufRead,BufNewFile *.markdown setlocal spell
augroup END

" syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" use ag for ctrlp
let g:ctrlp_use_caching = 0
if executable('ag')
    set grepprg=ag\ --nogroup\ --nocolor
    let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
else
  let g:ctrlp_user_command = ['.git',
    \ 'cd %s && git ls-files . -co --exclude-standard',
    \ 'find %s -type f' ]
endif

call ctrlp_bdelete#init()
